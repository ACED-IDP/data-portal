import React, { useEffect } from 'react';
import PropTypes from 'prop-types';
import { useQueries } from 'react-query';
// import Dropdown from '@gen3/ui-component/dist/components/Dropdown';
import { Spin, Select } from 'antd';
import { fetchConceptStatsByHareSubset, queryConfig } from "../Shared/wizardEndpoints/cohortMiddlewareApi";
import { useSourceContext } from '../Shared/Source';
import { pseudoTw } from '../Shared/constants';

const SelectHareDropDown = ({
    selectedHare,
    selectedCohort,
    covariates,
    outcome,
    handleHareChange,
}) => {
    const { source } = useSourceContext();
    const { width } = pseudoTw;
    const hareResults = useQueries( outcome.variable_type === "concept" ? [
        {
            queryKey: ['conceptstatsbyhare',
                outcome,
                covariates,
                selectedCohort
            ],
            queryFn: () => fetchConceptStatsByHareSubset(
                selectedCohort.cohort_definition_id,
                covariates,
                outcome,
                source
            ),
            ...queryConfig
        }
    ] :
        [{
            queryKey: ['conceptstatsbyharecase',
                outcome,
                covariates,
                selectedCohort
            ],
            queryFn: () => fetchConceptStatsByHareSubset(
                selectedCohort.cohort_definition_id,
                [...covariates, {
                    variable_type: 'custom_dichotomous',
                    cohort_ids: [
                        selectedCohort.cohort_definition_id,
                        outcome.cohort_ids[0],
                    ],
                    provided_name:
                        'Autogenerated variable for filtering out Control Population',
                }],
                outcome,
                source
            ),
            ...queryConfig
        },
        {
            queryKey: ['conceptstatsbyharecontrol',
                outcome,
                covariates,
                selectedCohort
            ],
            queryFn: () => fetchConceptStatsByHareSubset(
                selectedCohort.cohort_definition_id,
                [...covariates, {
                    variable_type: 'custom_dichotomous',
                    cohort_ids: [
                        selectedCohort.cohort_definition_id,
                        outcome.cohort_ids[1],
                    ],
                    provided_name:
                        'Autogenerated variable for filtering out Case Population',
                }],
                outcome,
                source
            ),
            ...queryConfig
        }]);

        if (hareResults.length === 1) {
            const { status: statusX } = hareResults;
        }
        let statusY, statusZ = "success";
        // hareResults length === 2
        // else {
        //     const { status: statusY } = hareResults[0];
        //     const { status: statusZ } = hareResults[1]
        // }

    //   const getHareDescriptionBreakdown = (singleHare, allHares) => {
    //     const hareBreakdown = allHares.find((hare) => hare.concept_value === singleHare.concept_value);
    //     return `${hareBreakdown.concept_value_name} (size: ${hareBreakdown.persons_in_cohort_with_value})`;
    //   };

    //   useEffect(() => {
    //     if (selectedHare && data?.concept_breakdown) {
    //     //   handleHareChange(selectedHare);
    //     handleHareChange({ accessor: "selectedHare", payload: selectedHare })
    //     }
    //   }, [selectedHare, data, handleHareChange]);


    //   if (data) {
    //     // special case - endpoint returns empty result:
    //     if (data.concept_breakdown == null) {
    //       return (
    //         <React.Fragment>
    //           Error: there are no subjects in this cohort that have data available on all the selected covariates
    //           and phenotype. Please review your selections
    //         </React.Fragment>
    //       );
    //     }
    // normal scenario - there is breakdown data, so show in dropdown:
    return (
        <>
        <button onClick={() => console.log('hares', hareResults)}>hares</button>
        {[statusX, statusY, statusZ].includes("loading") && <Spin />}
        {statusX === "error" || [statusY, statusZ].some((status) => status === "error") && (<>error</>)}
        {(statusX === "success" || [statusY, statusZ].every((status) => status === "success")) && <Select
            style={{...width.size("30%")}}
            showSearch={true}
            placeholder='-select one of the ancestry groups below-'
            // fieldNames={{ label: 'todo', value: 'todo' }}
            // options={fetchedHareBreakdowns}
            // optionFilterProp={`todo`}
            // onChange={dispatch({ accessor: "selectedHare", payload: todo })}
            dropdownStyle={{...width.size(800)}}
            // filterOption={(searchTerm, hare) => (hare?.WhateverLabelIs ?? '').toLowerCase().includes(searchTerm.toLowerCase())}
        />}
        </>
        //   <Dropdown buttonType='secondary' id='cohort-hare-selection-dropdown'>
        //     <Dropdown.Button rightIcon='dropdown' buttonType='secondary'>
        //       {(selectedHare?.concept_value?.length)
        //         ? getHareDescriptionBreakdown(selectedHare, data.concept_breakdown)
        //         : '-select one of the ancestry groups below-'}
        //     </Dropdown.Button>
        //     <Dropdown.Menu>
        //       {
        //         data.concept_breakdown.map((hare) => (
        //           <Dropdown.Item
        //             key={`key-${hare.concept_value}`}
        //             value={`${hare}`}
        //             onClick={() => handleHareChange(hare)}
        //           >
        //             <div>{getHareDescriptionBreakdown(hare, data.concept_breakdown)}</div>
        //           </Dropdown.Item>
        //         ))
        //       }
        //     </Dropdown.Menu>
        //   </Dropdown>
    );
};

SelectHareDropDown.propTypes = {
    selectedHare: PropTypes.object.isRequired,
    selectedCohort: PropTypes.object.isRequired,
    outcome: PropTypes.object.isRequired,
    covariates: PropTypes.array.isRequired,
    handleHareChange: PropTypes.func.isRequired,
};

export default SelectHareDropDown;
